[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m------------------------< [0;36mcom.example:apirest[0;1m >-------------------------[m
[[1;34mINFO[m] [1mBuilding apirest 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m>>> [0;32mspring-boot-maven-plugin:3.2.3:run[m [1m(default-cli)[0;1m > [0;1mtest-compile[m @ [36mapirest[0;1m >>>[m
[[1;33mWARNING[m] The artifact org.hibernate:hibernate-envers:jar:6.4.4.Final has been relocated to org.hibernate.orm:hibernate-envers:jar:6.4.4.Final
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mapirest[0;1m ---[m
[[1;34mINFO[m] Copying 1 resource from src/main/resources to target/classes
[[1;34mINFO[m] Copying 0 resource from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:compile[m [1m(default-compile)[m @ [36mapirest[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mapirest[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/pablo/Desktop/TUP/laboratorio_4_gonzalez/ecommerce zapatillas/apirest/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:testCompile[m [1m(default-testCompile)[m @ [36mapirest[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :source
[[1;34mINFO[m] Compiling 1 source file with javac [debug release 17] to target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m<<< [0;32mspring-boot-maven-plugin:3.2.3:run[m [1m(default-cli)[0;1m < [0;1mtest-compile[m @ [36mapirest[0;1m <<<[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.2.3:run[m [1m(default-cli)[m @ [36mapirest[0;1m ---[m
[[1;34mINFO[m] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.3)

2025-06-11T05:32:31.327-03:00  INFO 439182 --- [apirest] [           main] com.example.apirest.ApirestApplication   : Starting ApirestApplication using Java 17.0.15 with PID 439182 (/home/pablo/Desktop/TUP/laboratorio_4_gonzalez/ecommerce zapatillas/apirest/target/classes started by pablo in /home/pablo/Desktop/TUP/laboratorio_4_gonzalez/ecommerce zapatillas/apirest)
2025-06-11T05:32:31.330-03:00  INFO 439182 --- [apirest] [           main] com.example.apirest.ApirestApplication   : No active profile set, falling back to 1 default profile: "default"
2025-06-11T05:32:31.952-03:00  INFO 439182 --- [apirest] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-11T05:32:32.033-03:00  INFO 439182 --- [apirest] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 75 ms. Found 15 JPA repository interfaces.
2025-06-11T05:32:32.547-03:00  INFO 439182 --- [apirest] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 9000 (http)
2025-06-11T05:32:32.558-03:00  INFO 439182 --- [apirest] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-11T05:32:32.559-03:00  INFO 439182 --- [apirest] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-11T05:32:32.631-03:00  INFO 439182 --- [apirest] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-11T05:32:32.632-03:00  INFO 439182 --- [apirest] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1267 ms
2025-06-11T05:32:32.755-03:00  INFO 439182 --- [apirest] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-11T05:32:32.798-03:00  INFO 439182 --- [apirest] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-11T05:32:32.825-03:00  INFO 439182 --- [apirest] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-11T05:32:32.885-03:00  INFO 439182 --- [apirest] [           main] o.h.e.boot.internal.EnversServiceImpl    : Envers integration enabled? : true
2025-06-11T05:32:32.974-03:00  INFO 439182 --- [apirest] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-11T05:32:32.992-03:00  INFO 439182 --- [apirest] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-11T05:32:33.245-03:00  INFO 439182 --- [apirest] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@61b8c9de
2025-06-11T05:32:33.247-03:00  INFO 439182 --- [apirest] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-11T05:32:33.282-03:00  WARN 439182 --- [apirest] [           main] org.hibernate.orm.deprecation            : HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-11T05:32:33.586-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Colour
2025-06-11T05:32:33.589-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.ProductSize
2025-06-11T05:32:33.590-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.ProductDiscount
2025-06-11T05:32:33.591-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Brand
2025-06-11T05:32:33.591-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.User
2025-06-11T05:32:33.591-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.UsersAdress
2025-06-11T05:32:33.591-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Detail
2025-06-11T05:32:33.591-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Product
2025-06-11T05:32:33.593-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Size
2025-06-11T05:32:33.593-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.PurchaseOrder
2025-06-11T05:32:33.594-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.ProductImage
2025-06-11T05:32:33.594-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Type
2025-06-11T05:32:33.594-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Category
2025-06-11T05:32:33.594-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Discount
2025-06-11T05:32:33.595-03:00  INFO 439182 --- [apirest] [           main] o.h.e.c.i.m.AuditMetadataGenerator       : Adding properties for entity: com.example.apirest.entities.Adress
2025-06-11T05:32:34.354-03:00  INFO 439182 --- [apirest] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    alter table addresses_aud 
       drop 
       foreign key FK10p0uldbbw4ngo8hfhor2bg6o
2025-06-11T05:32:34.380-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table addresses_aud 
       drop 
       foreign key FK10p0uldbbw4ngo8hfhor2bg6o" via JDBC [Table 'db_ecommerce_spring_boot.addresses_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table addresses_aud 
       drop 
       foreign key FK10p0uldbbw4ngo8hfhor2bg6o" via JDBC [Table 'db_ecommerce_spring_boot.addresses_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.addresses_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table brand_aud 
       drop 
       foreign key FK5ip3g3x0aspvu378ak7ya3g8o
2025-06-11T05:32:34.386-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table brand_aud 
       drop 
       foreign key FK5ip3g3x0aspvu378ak7ya3g8o" via JDBC [Table 'db_ecommerce_spring_boot.brand_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table brand_aud 
       drop 
       foreign key FK5ip3g3x0aspvu378ak7ya3g8o" via JDBC [Table 'db_ecommerce_spring_boot.brand_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.brand_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table category 
       drop 
       foreign key FKo2thnhdqk8sj74hk40k64kap8
2025-06-11T05:32:34.388-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table category 
       drop 
       foreign key FKo2thnhdqk8sj74hk40k64kap8" via JDBC [Table 'db_ecommerce_spring_boot.category' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table category 
       drop 
       foreign key FKo2thnhdqk8sj74hk40k64kap8" via JDBC [Table 'db_ecommerce_spring_boot.category' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.category' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table category_aud 
       drop 
       foreign key FKjpr6cpsy8m8s0y073w7d2ra8u
2025-06-11T05:32:34.390-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table category_aud 
       drop 
       foreign key FKjpr6cpsy8m8s0y073w7d2ra8u" via JDBC [Table 'db_ecommerce_spring_boot.category_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table category_aud 
       drop 
       foreign key FKjpr6cpsy8m8s0y073w7d2ra8u" via JDBC [Table 'db_ecommerce_spring_boot.category_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.category_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table colour_aud 
       drop 
       foreign key FKkby6arg9sfdjl75nifdi8dp45
2025-06-11T05:32:34.392-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table colour_aud 
       drop 
       foreign key FKkby6arg9sfdjl75nifdi8dp45" via JDBC [Table 'db_ecommerce_spring_boot.colour_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table colour_aud 
       drop 
       foreign key FKkby6arg9sfdjl75nifdi8dp45" via JDBC [Table 'db_ecommerce_spring_boot.colour_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.colour_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table detail 
       drop 
       foreign key FKj3xts7y5rbrekgijwq4pb5aj6
2025-06-11T05:32:34.394-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table detail 
       drop 
       foreign key FKj3xts7y5rbrekgijwq4pb5aj6" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table detail 
       drop 
       foreign key FKj3xts7y5rbrekgijwq4pb5aj6" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.detail' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table detail 
       drop 
       foreign key FKin72vis4xiw2si2b3tmcd1727
2025-06-11T05:32:34.396-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table detail 
       drop 
       foreign key FKin72vis4xiw2si2b3tmcd1727" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table detail 
       drop 
       foreign key FKin72vis4xiw2si2b3tmcd1727" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.detail' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table detail 
       drop 
       foreign key FK7jsiia4228p3wgjl1oyy7tk8c
2025-06-11T05:32:34.398-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table detail 
       drop 
       foreign key FK7jsiia4228p3wgjl1oyy7tk8c" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table detail 
       drop 
       foreign key FK7jsiia4228p3wgjl1oyy7tk8c" via JDBC [Table 'db_ecommerce_spring_boot.detail' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.detail' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table detail_aud 
       drop 
       foreign key FKqutth2mytb5s28num7xjkoiw8
2025-06-11T05:32:34.400-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table detail_aud 
       drop 
       foreign key FKqutth2mytb5s28num7xjkoiw8" via JDBC [Table 'db_ecommerce_spring_boot.detail_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table detail_aud 
       drop 
       foreign key FKqutth2mytb5s28num7xjkoiw8" via JDBC [Table 'db_ecommerce_spring_boot.detail_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.detail_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table discount_aud 
       drop 
       foreign key FKl89fsx52ekyakjmlff2x571w0
2025-06-11T05:32:34.401-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table discount_aud 
       drop 
       foreign key FKl89fsx52ekyakjmlff2x571w0" via JDBC [Table 'db_ecommerce_spring_boot.discount_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table discount_aud 
       drop 
       foreign key FKl89fsx52ekyakjmlff2x571w0" via JDBC [Table 'db_ecommerce_spring_boot.discount_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.discount_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_discount 
       drop 
       foreign key FK1mddxl69vl4ucs3mw8tpw1v38
2025-06-11T05:32:34.403-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_discount 
       drop 
       foreign key FK1mddxl69vl4ucs3mw8tpw1v38" via JDBC [Table 'db_ecommerce_spring_boot.product_discount' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_discount 
       drop 
       foreign key FK1mddxl69vl4ucs3mw8tpw1v38" via JDBC [Table 'db_ecommerce_spring_boot.product_discount' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_discount' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_discount 
       drop 
       foreign key FKof5epwi1xp9cmb7lh2bm36cnj
2025-06-11T05:32:34.405-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_discount 
       drop 
       foreign key FKof5epwi1xp9cmb7lh2bm36cnj" via JDBC [Table 'db_ecommerce_spring_boot.product_discount' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_discount 
       drop 
       foreign key FKof5epwi1xp9cmb7lh2bm36cnj" via JDBC [Table 'db_ecommerce_spring_boot.product_discount' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_discount' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_discount_aud 
       drop 
       foreign key FK4vl6hyf7o862as2gufrijkme1
2025-06-11T05:32:34.406-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_discount_aud 
       drop 
       foreign key FK4vl6hyf7o862as2gufrijkme1" via JDBC [Table 'db_ecommerce_spring_boot.product_discount_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_discount_aud 
       drop 
       foreign key FK4vl6hyf7o862as2gufrijkme1" via JDBC [Table 'db_ecommerce_spring_boot.product_discount_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_discount_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_image 
       drop 
       foreign key FK1n91c4vdhw8pa4frngs4qbbvs
2025-06-11T05:32:34.407-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_image 
       drop 
       foreign key FK1n91c4vdhw8pa4frngs4qbbvs" via JDBC [Table 'db_ecommerce_spring_boot.product_image' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_image 
       drop 
       foreign key FK1n91c4vdhw8pa4frngs4qbbvs" via JDBC [Table 'db_ecommerce_spring_boot.product_image' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_image' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_image_aud 
       drop 
       foreign key FKapy7c15ok91775j15dunn8ych
2025-06-11T05:32:34.409-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_image_aud 
       drop 
       foreign key FKapy7c15ok91775j15dunn8ych" via JDBC [Table 'db_ecommerce_spring_boot.product_image_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_image_aud 
       drop 
       foreign key FKapy7c15ok91775j15dunn8ych" via JDBC [Table 'db_ecommerce_spring_boot.product_image_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_image_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_size 
       drop 
       foreign key FKt3iuwe3pon0k0i2q5pd68n4ik
2025-06-11T05:32:34.411-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_size 
       drop 
       foreign key FKt3iuwe3pon0k0i2q5pd68n4ik" via JDBC [Table 'db_ecommerce_spring_boot.product_size' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_size 
       drop 
       foreign key FKt3iuwe3pon0k0i2q5pd68n4ik" via JDBC [Table 'db_ecommerce_spring_boot.product_size' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_size' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_size 
       drop 
       foreign key FK6fxbikls9s0pbsqq68nr4m5fo
2025-06-11T05:32:34.412-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_size 
       drop 
       foreign key FK6fxbikls9s0pbsqq68nr4m5fo" via JDBC [Table 'db_ecommerce_spring_boot.product_size' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_size 
       drop 
       foreign key FK6fxbikls9s0pbsqq68nr4m5fo" via JDBC [Table 'db_ecommerce_spring_boot.product_size' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_size' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table product_size_aud 
       drop 
       foreign key FKky4q9weirrtt26oysdne2ra4h
2025-06-11T05:32:34.414-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table product_size_aud 
       drop 
       foreign key FKky4q9weirrtt26oysdne2ra4h" via JDBC [Table 'db_ecommerce_spring_boot.product_size_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table product_size_aud 
       drop 
       foreign key FKky4q9weirrtt26oysdne2ra4h" via JDBC [Table 'db_ecommerce_spring_boot.product_size_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.product_size_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table products 
       drop 
       foreign key FKl2cyj2st6mjygl2pgwd057ivu
2025-06-11T05:32:34.416-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table products 
       drop 
       foreign key FKl2cyj2st6mjygl2pgwd057ivu" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table products 
       drop 
       foreign key FKl2cyj2st6mjygl2pgwd057ivu" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.products' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table products 
       drop 
       foreign key FK1cf90etcu98x1e6n9aks3tel3
2025-06-11T05:32:34.418-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table products 
       drop 
       foreign key FK1cf90etcu98x1e6n9aks3tel3" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table products 
       drop 
       foreign key FK1cf90etcu98x1e6n9aks3tel3" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.products' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table products 
       drop 
       foreign key FKsl7v4glfqhenjmg9m841gj601
2025-06-11T05:32:34.419-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table products 
       drop 
       foreign key FKsl7v4glfqhenjmg9m841gj601" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table products 
       drop 
       foreign key FKsl7v4glfqhenjmg9m841gj601" via JDBC [Table 'db_ecommerce_spring_boot.products' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.products' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table products_aud 
       drop 
       foreign key FKp9hlp9bjphkci62bgullu2fle
2025-06-11T05:32:34.421-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table products_aud 
       drop 
       foreign key FKp9hlp9bjphkci62bgullu2fle" via JDBC [Table 'db_ecommerce_spring_boot.products_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table products_aud 
       drop 
       foreign key FKp9hlp9bjphkci62bgullu2fle" via JDBC [Table 'db_ecommerce_spring_boot.products_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.products_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table purchase_order 
       drop 
       foreign key FKjqu3o8f6m6l2ufease59kkehx
2025-06-11T05:32:34.422-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table purchase_order 
       drop 
       foreign key FKjqu3o8f6m6l2ufease59kkehx" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table purchase_order 
       drop 
       foreign key FKjqu3o8f6m6l2ufease59kkehx" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table purchase_order 
       drop 
       foreign key FKe9vllsihkfo62ku9jene2ler8
2025-06-11T05:32:34.423-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table purchase_order 
       drop 
       foreign key FKe9vllsihkfo62ku9jene2ler8" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table purchase_order 
       drop 
       foreign key FKe9vllsihkfo62ku9jene2ler8" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.purchase_order' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table purchase_order_aud 
       drop 
       foreign key FK8dgknj1iwmf0gamb8w5hodxyu
2025-06-11T05:32:34.425-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table purchase_order_aud 
       drop 
       foreign key FK8dgknj1iwmf0gamb8w5hodxyu" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table purchase_order_aud 
       drop 
       foreign key FK8dgknj1iwmf0gamb8w5hodxyu" via JDBC [Table 'db_ecommerce_spring_boot.purchase_order_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.purchase_order_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table size_aud 
       drop 
       foreign key FKc0brlom5hanbetxfxgour3vvy
2025-06-11T05:32:34.426-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table size_aud 
       drop 
       foreign key FKc0brlom5hanbetxfxgour3vvy" via JDBC [Table 'db_ecommerce_spring_boot.size_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table size_aud 
       drop 
       foreign key FKc0brlom5hanbetxfxgour3vvy" via JDBC [Table 'db_ecommerce_spring_boot.size_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.size_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table type_aud 
       drop 
       foreign key FK29gn743l8e8iunqt1w9ibap8j
2025-06-11T05:32:34.427-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table type_aud 
       drop 
       foreign key FK29gn743l8e8iunqt1w9ibap8j" via JDBC [Table 'db_ecommerce_spring_boot.type_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table type_aud 
       drop 
       foreign key FK29gn743l8e8iunqt1w9ibap8j" via JDBC [Table 'db_ecommerce_spring_boot.type_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.type_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table user_addresses 
       drop 
       foreign key FKhqfg2eivfexu69i6cbw3w0tej
2025-06-11T05:32:34.429-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_addresses 
       drop 
       foreign key FKhqfg2eivfexu69i6cbw3w0tej" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_addresses 
       drop 
       foreign key FKhqfg2eivfexu69i6cbw3w0tej" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table user_addresses 
       drop 
       foreign key FKn2fisxyyu3l9wlch3ve2nocgp
2025-06-11T05:32:34.430-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_addresses 
       drop 
       foreign key FKn2fisxyyu3l9wlch3ve2nocgp" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_addresses 
       drop 
       foreign key FKn2fisxyyu3l9wlch3ve2nocgp" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.user_addresses' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table user_addresses_aud 
       drop 
       foreign key FK3mn7bmx2m7cdrj4jy38yp85a7
2025-06-11T05:32:34.431-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_addresses_aud 
       drop 
       foreign key FK3mn7bmx2m7cdrj4jy38yp85a7" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_addresses_aud 
       drop 
       foreign key FK3mn7bmx2m7cdrj4jy38yp85a7" via JDBC [Table 'db_ecommerce_spring_boot.user_addresses_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.user_addresses_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    alter table users_aud 
       drop 
       foreign key FKkf7vorod2dx6yfu6e1pyipcl4
2025-06-11T05:32:34.433-03:00  WARN 439182 --- [apirest] [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users_aud 
       drop 
       foreign key FKkf7vorod2dx6yfu6e1pyipcl4" via JDBC [Table 'db_ecommerce_spring_boot.users_aud' doesn't exist]

org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users_aud 
       drop 
       foreign key FKkf7vorod2dx6yfu6e1pyipcl4" via JDBC [Table 'db_ecommerce_spring_boot.users_aud' doesn't exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applyConstraintDropping(SchemaDropperImpl.java:470) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:242) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:244) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at java.base/java.util.HashMap.forEach(HashMap.java:1421) ~[na:na]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:388) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:364) ~[spring-orm-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1685) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1355) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1192) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437) ~[tomcat-embed-core-10.1.19.jar:10.1.19]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618) ~[spring-context-6.1.4.jar:6.1.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.3.jar:3.2.3]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.3.jar:3.2.3]
	at com.example.apirest.ApirestApplication.main(ApirestApplication.java:10) ~[classes/:na]
Caused by: java.sql.SQLSyntaxErrorException: Table 'db_ecommerce_spring_boot.users_aud' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:770) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:653) ~[mysql-connector-j-8.3.0.jar:8.3.0]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80) ~[hibernate-core-6.4.4.Final.jar:6.4.4.Final]
	... 134 common frames omitted

Hibernate: 
    drop table if exists addresses
Hibernate: 
    drop table if exists addresses_aud
Hibernate: 
    drop table if exists brand
Hibernate: 
    drop table if exists brand_aud
Hibernate: 
    drop table if exists category
Hibernate: 
    drop table if exists category_aud
Hibernate: 
    drop table if exists colour
Hibernate: 
    drop table if exists colour_aud
Hibernate: 
    drop table if exists detail
Hibernate: 
    drop table if exists detail_aud
Hibernate: 
    drop table if exists discount
Hibernate: 
    drop table if exists discount_aud
Hibernate: 
    drop table if exists product_discount
Hibernate: 
    drop table if exists product_discount_aud
Hibernate: 
    drop table if exists product_image
Hibernate: 
    drop table if exists product_image_aud
Hibernate: 
    drop table if exists product_size
Hibernate: 
    drop table if exists product_size_aud
Hibernate: 
    drop table if exists products
Hibernate: 
    drop table if exists products_aud
Hibernate: 
    drop table if exists purchase_order
Hibernate: 
    drop table if exists purchase_order_aud
Hibernate: 
    drop table if exists revision_info
Hibernate: 
    drop table if exists revision_seq_gen
Hibernate: 
    drop table if exists size
Hibernate: 
    drop table if exists size_aud
Hibernate: 
    drop table if exists type
Hibernate: 
    drop table if exists type_aud
Hibernate: 
    drop table if exists user_addresses
Hibernate: 
    drop table if exists user_addresses_aud
Hibernate: 
    drop table if exists users
Hibernate: 
    drop table if exists users_aud
Hibernate: 
    create table addresses (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        country varchar(255),
        cpi varchar(255),
        state varchar(255),
        street varchar(255),
        town varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table addresses_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        country varchar(255),
        cpi varchar(255),
        state varchar(255),
        street varchar(255),
        town varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table brand (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        name varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table brand_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        name varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table category (
        id integer not null auto_increment,
        is_active bit,
        type_id integer,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        name varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table category_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        type_id integer,
        name varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table colour (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        name varchar(255),
        value varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table colour_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        name varchar(255),
        value varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table detail (
        id integer not null auto_increment,
        is_active bit,
        order_id integer,
        product_id integer,
        quantity integer,
        size_id integer,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table detail_aud (
        id integer not null,
        order_id integer,
        product_id integer,
        quantity integer,
        rev integer not null,
        revtype tinyint,
        size_id integer,
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table discount (
        discount_percentage integer,
        end_date date,
        id integer not null auto_increment,
        is_active bit,
        start_date date,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table discount_aud (
        discount_percentage integer,
        end_date date,
        id integer not null,
        rev integer not null,
        revtype tinyint,
        start_date date,
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table product_discount (
        id_discount integer not null,
        id_product integer not null,
        primary key (id_discount, id_product)
    ) engine=InnoDB
Hibernate: 
    create table product_discount_aud (
        id_discount integer not null,
        id_product integer not null,
        rev integer not null,
        revtype tinyint,
        primary key (id_discount, id_product, rev)
    ) engine=InnoDB
Hibernate: 
    create table product_image (
        id integer not null auto_increment,
        is_active bit,
        is_principal_product_image bit,
        product_id integer,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        link varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table product_image_aud (
        id integer not null,
        is_principal_product_image bit,
        product_id integer,
        rev integer not null,
        revtype tinyint,
        link varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table product_size (
        id_product integer not null,
        id_size integer not null,
        stock integer,
        primary key (id_product, id_size)
    ) engine=InnoDB
Hibernate: 
    create table product_size_aud (
        id_product integer not null,
        id_size integer not null,
        rev integer not null,
        revtype tinyint,
        stock integer,
        primary key (id_product, id_size, rev)
    ) engine=InnoDB
Hibernate: 
    create table products (
        brand_id integer,
        category_id integer,
        colour_id integer,
        id integer not null auto_increment,
        is_active bit,
        price float(53),
        status bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        description TEXT,
        image varchar(255),
        name varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table products_aud (
        brand_id integer,
        category_id integer,
        colour_id integer,
        id integer not null,
        price float(53),
        rev integer not null,
        revtype tinyint,
        status bit,
        description TEXT,
        image varchar(255),
        name varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table purchase_order (
        id integer not null auto_increment,
        is_active bit,
        total float(53),
        user_address_id integer,
        user_id integer,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        payment_method varchar(255),
        status enum ('PENDING','PAID','CANCELLED'),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table purchase_order_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        total float(53),
        user_address_id integer,
        user_id integer,
        payment_method varchar(255),
        status enum ('PENDING','PAID','CANCELLED'),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table revision_info (
        id integer not null,
        revision_date datetime(6),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table revision_seq_gen (
        next_val bigint
    ) engine=InnoDB
Hibernate: 
    insert into revision_seq_gen values ( 1 )
Hibernate: 
    create table size (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        number varchar(255),
        system_type enum ('ARG','US','UK','CM'),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table size_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        number varchar(255),
        system_type enum ('ARG','US','UK','CM'),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table type (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        name varchar(255),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table type_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        name varchar(255),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    create table user_addresses (
        address_id integer not null,
        user_id integer not null,
        primary key (address_id, user_id)
    ) engine=InnoDB
Hibernate: 
    create table user_addresses_aud (
        address_id integer not null,
        rev integer not null,
        revtype tinyint,
        user_id integer not null,
        primary key (address_id, rev, user_id)
    ) engine=InnoDB
Hibernate: 
    create table users (
        id integer not null auto_increment,
        is_active bit,
        created_at datetime(6),
        deleted_at datetime(6),
        updated_at datetime(6),
        email varchar(255) not null,
        last_name varchar(255),
        name varchar(255),
        password varchar(255) not null,
        username varchar(255) not null,
        role enum ('ADMIN','CLIENT'),
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table users_aud (
        id integer not null,
        rev integer not null,
        revtype tinyint,
        email varchar(255),
        last_name varchar(255),
        name varchar(255),
        password varchar(255),
        username varchar(255),
        role enum ('ADMIN','CLIENT'),
        primary key (id, rev)
    ) engine=InnoDB
Hibernate: 
    alter table brand 
       add constraint UK_rdxh7tq2xs66r485cc8dkxt77 unique (name)
Hibernate: 
    alter table colour 
       add constraint UK_o8fnk94dbrotjlf8fnbx2lwni unique (name)
Hibernate: 
    alter table users 
       add constraint UK_6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    alter table users 
       add constraint UK_r43af9ap4edm43mmtq01oddj6 unique (username)
Hibernate: 
    alter table addresses_aud 
       add constraint FK10p0uldbbw4ngo8hfhor2bg6o 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table brand_aud 
       add constraint FK5ip3g3x0aspvu378ak7ya3g8o 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table category 
       add constraint FKo2thnhdqk8sj74hk40k64kap8 
       foreign key (type_id) 
       references type (id)
Hibernate: 
    alter table category_aud 
       add constraint FKjpr6cpsy8m8s0y073w7d2ra8u 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table colour_aud 
       add constraint FKkby6arg9sfdjl75nifdi8dp45 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table detail 
       add constraint FKj3xts7y5rbrekgijwq4pb5aj6 
       foreign key (product_id) 
       references products (id)
Hibernate: 
    alter table detail 
       add constraint FKin72vis4xiw2si2b3tmcd1727 
       foreign key (order_id) 
       references purchase_order (id)
Hibernate: 
    alter table detail 
       add constraint FK7jsiia4228p3wgjl1oyy7tk8c 
       foreign key (size_id) 
       references size (id)
Hibernate: 
    alter table detail_aud 
       add constraint FKqutth2mytb5s28num7xjkoiw8 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table discount_aud 
       add constraint FKl89fsx52ekyakjmlff2x571w0 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table product_discount 
       add constraint FK1mddxl69vl4ucs3mw8tpw1v38 
       foreign key (id_discount) 
       references discount (id)
Hibernate: 
    alter table product_discount 
       add constraint FKof5epwi1xp9cmb7lh2bm36cnj 
       foreign key (id_product) 
       references products (id)
Hibernate: 
    alter table product_discount_aud 
       add constraint FK4vl6hyf7o862as2gufrijkme1 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table product_image 
       add constraint FK1n91c4vdhw8pa4frngs4qbbvs 
       foreign key (product_id) 
       references products (id)
Hibernate: 
    alter table product_image_aud 
       add constraint FKapy7c15ok91775j15dunn8ych 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table product_size 
       add constraint FKt3iuwe3pon0k0i2q5pd68n4ik 
       foreign key (id_product) 
       references products (id)
Hibernate: 
    alter table product_size 
       add constraint FK6fxbikls9s0pbsqq68nr4m5fo 
       foreign key (id_size) 
       references size (id)
Hibernate: 
    alter table product_size_aud 
       add constraint FKky4q9weirrtt26oysdne2ra4h 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table products 
       add constraint FKl2cyj2st6mjygl2pgwd057ivu 
       foreign key (brand_id) 
       references brand (id)
Hibernate: 
    alter table products 
       add constraint FK1cf90etcu98x1e6n9aks3tel3 
       foreign key (category_id) 
       references category (id)
Hibernate: 
    alter table products 
       add constraint FKsl7v4glfqhenjmg9m841gj601 
       foreign key (colour_id) 
       references colour (id)
Hibernate: 
    alter table products_aud 
       add constraint FKp9hlp9bjphkci62bgullu2fle 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table purchase_order 
       add constraint FKjqu3o8f6m6l2ufease59kkehx 
       foreign key (user_id) 
       references users (id)
Hibernate: 
    alter table purchase_order 
       add constraint FKe9vllsihkfo62ku9jene2ler8 
       foreign key (user_address_id, user_id) 
       references user_addresses (address_id, user_id)
Hibernate: 
    alter table purchase_order_aud 
       add constraint FK8dgknj1iwmf0gamb8w5hodxyu 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table size_aud 
       add constraint FKc0brlom5hanbetxfxgour3vvy 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table type_aud 
       add constraint FK29gn743l8e8iunqt1w9ibap8j 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table user_addresses 
       add constraint FKhqfg2eivfexu69i6cbw3w0tej 
       foreign key (address_id) 
       references addresses (id)
Hibernate: 
    alter table user_addresses 
       add constraint FKn2fisxyyu3l9wlch3ve2nocgp 
       foreign key (user_id) 
       references users (id)
Hibernate: 
    alter table user_addresses_aud 
       add constraint FK3mn7bmx2m7cdrj4jy38yp85a7 
       foreign key (rev) 
       references revision_info (id)
Hibernate: 
    alter table users_aud 
       add constraint FKkf7vorod2dx6yfu6e1pyipcl4 
       foreign key (rev) 
       references revision_info (id)
2025-06-11T05:32:44.213-03:00  INFO 439182 --- [apirest] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-11T05:32:44.674-03:00  INFO 439182 --- [apirest] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
✅ Mercado Pago configurado correctamente desde Configuration
2025-06-11T05:32:45.234-03:00  WARN 439182 --- [apirest] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-11T05:32:45.657-03:00  INFO 439182 --- [apirest] [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@48c6107a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7ea2ce9d, org.springframework.security.web.context.SecurityContextHolderFilter@59217757, org.springframework.security.web.header.HeaderWriterFilter@4dd94931, org.springframework.web.filter.CorsFilter@7e8a0192, org.springframework.security.web.authentication.logout.LogoutFilter@7645ced6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e4084e0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64bf60c7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@61736817, org.springframework.security.web.session.SessionManagementFilter@bd62a6e, org.springframework.security.web.access.ExceptionTranslationFilter@56b972a8, org.springframework.security.web.access.intercept.AuthorizationFilter@7cf9557a]
2025-06-11T05:32:45.943-03:00  INFO 439182 --- [apirest] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 9000 (http) with context path ''
2025-06-11T05:32:45.951-03:00  INFO 439182 --- [apirest] [           main] com.example.apirest.ApirestApplication   : Started ApirestApplication in 14.905 seconds (process running for 15.182)
Inicializando base de datos con datos de prueba...
Tablas recreadas - cargando datos nuevos...
Cargando colores...
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        colour
        (created_at, deleted_at, is_active, name, updated_at, value) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        colour_aud
        (revtype, name, value, rev, id) 
    values
        (?, ?, ?, ?, ?)
OK 10 colores cargados
Cargando marcas...
Hibernate: 
    insert 
    into
        brand
        (created_at, deleted_at, is_active, name, updated_at) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        brand_aud
        (revtype, name, rev, id) 
    values
        (?, ?, ?, ?)
OK 1 marcas cargadas
Cargando tipos...
Hibernate: 
    insert 
    into
        type
        (created_at, deleted_at, is_active, name, updated_at) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        type_aud
        (revtype, name, rev, id) 
    values
        (?, ?, ?, ?)
OK 1 tipos cargados
Cargando categorías...
Hibernate: 
    insert 
    into
        category
        (created_at, deleted_at, is_active, name, type_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        category_aud
        (revtype, name, type_id, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        category
        (created_at, deleted_at, is_active, name, type_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        category_aud
        (revtype, name, type_id, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        category
        (created_at, deleted_at, is_active, name, type_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        category_aud
        (revtype, name, type_id, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        category
        (created_at, deleted_at, is_active, name, type_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        category_aud
        (revtype, name, type_id, rev, id) 
    values
        (?, ?, ?, ?, ?)
OK 4 categorías cargadas
Cargando productos...
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        products
        (brand_id, category_id, colour_id, created_at, deleted_at, description, image, is_active, name, price, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        products_aud
        (revtype, brand_id, category_id, colour_id, description, image, name, price, status, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
OK 22 productos cargados
Cargando imágenes de productos...
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        product_image
        (created_at, deleted_at, is_active, is_principal_product_image, link, product_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_image_aud
        (revtype, is_principal_product_image, link, product_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?)
OK 88 imágenes de productos cargadas (4 por cada uno de los 22 productos)
Cargando talles...
Hibernate: 
    select
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at 
    from
        size s1_0
Cargando talles...
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        size
        (created_at, deleted_at, is_active, number, system_type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        size_aud
        (revtype, number, system_type, rev, id) 
    values
        (?, ?, ?, ?, ?)
OK 13 talles europeos = argentinos.
Total de talles cargados: 13
Asociando talles con productos y asignando stock...
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        ps1_0.stock 
    from
        product_size ps1_0
Asociando talles con productos y generando stock...
Hibernate: 
    select
        p1_0.id,
        p1_0.brand_id,
        p1_0.category_id,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at 
    from
        products p1_0
Hibernate: 
    select
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at 
    from
        brand b1_0 
    where
        b1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at 
    from
        size s1_0
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    select
        next_val as id_val 
    from
        revision_seq_gen for update
Hibernate: 
    update
        revision_seq_gen 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        ps1_0.id_product,
        ps1_0.id_size,
        p1_0.id,
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at,
        p1_0.brand_id,
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.type_id,
        c1_0.updated_at,
        p1_0.category_id,
        c2_0.id,
        c2_0.created_at,
        c2_0.deleted_at,
        c2_0.is_active,
        c2_0.name,
        c2_0.updated_at,
        c2_0.value,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at,
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at,
        ps1_0.stock 
    from
        product_size ps1_0 
    left join
        products p1_0 
            on p1_0.id=ps1_0.id_product 
    left join
        brand b1_0 
            on b1_0.id=p1_0.brand_id 
    left join
        category c1_0 
            on c1_0.id=p1_0.category_id 
    left join
        colour c2_0 
            on c2_0.id=p1_0.colour_id 
    left join
        size s1_0 
            on s1_0.id=ps1_0.id_size 
    where
        (
            ps1_0.id_product, ps1_0.id_size
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        product_size
        (stock, id_product, id_size) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        product_size_aud
        (revtype, stock, rev, id_product, id_size) 
    values
        (?, ?, ?, ?, ?)
Se han creado 286 asociaciones producto-talle con stock.
(22 productos × 13 talles = 286 asociaciones)
Stock total generado: 9389 unidades
Stock promedio por producto-talle: 32 unidades
Talles sin stock (stock = 0): 88
Cada producto tiene al menos 4 talles sin stock
Cargando usuarios...
Hibernate: 
    insert 
    into
        users
        (created_at, deleted_at, email, is_active, last_name, name, password, role, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        users_aud
        (revtype, email, last_name, name, password, role, username, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, deleted_at, email, is_active, last_name, name, password, role, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        users_aud
        (revtype, email, last_name, name, password, role, username, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2 usuarios cargados (1 admin, 1 cliente)
Cargando direcciones de usuarios...
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    insert 
    into
        addresses
        (country, cpi, created_at, deleted_at, is_active, state, street, town, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        addresses_aud
        (revtype, country, cpi, state, street, town, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        addresses
        (country, cpi, created_at, deleted_at, is_active, state, street, town, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        addresses_aud
        (revtype, country, cpi, state, street, town, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0
Hibernate: 
    select
        ua1_0.address_id,
        ua1_0.user_id,
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at,
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        user_addresses ua1_0 
    left join
        addresses a1_0 
            on a1_0.id=ua1_0.address_id 
    left join
        users u1_0 
            on u1_0.id=ua1_0.user_id 
    where
        (
            ua1_0.address_id, ua1_0.user_id
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        user_addresses
        (address_id, user_id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        user_addresses_aud
        (revtype, rev, address_id, user_id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        ua1_0.address_id,
        ua1_0.user_id,
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at,
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        user_addresses ua1_0 
    left join
        addresses a1_0 
            on a1_0.id=ua1_0.address_id 
    left join
        users u1_0 
            on u1_0.id=ua1_0.user_id 
    where
        (
            ua1_0.address_id, ua1_0.user_id
        ) in ((?, ?))
Hibernate: 
    insert 
    into
        user_addresses
        (address_id, user_id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        user_addresses_aud
        (revtype, rev, address_id, user_id) 
    values
        (?, ?, ?, ?)
2 direcciones cargadas y asociadas al cliente Juan Pérez (ID: 2)
Cargando orden de compra...
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        ua1_0.address_id,
        ua1_0.user_id 
    from
        user_addresses ua1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.brand_id,
        p1_0.category_id,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at 
    from
        products p1_0
Hibernate: 
    select
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at 
    from
        brand b1_0 
    where
        b1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at 
    from
        size s1_0
Hibernate: 
    insert 
    into
        purchase_order
        (created_at, deleted_at, is_active, payment_method, status, total, updated_at, user_address_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        purchase_order_aud
        (revtype, payment_method, status, total, user_address_id, user_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Orden de compra #1 creada (PENDING):
   - Cliente: Juan Carlos Pérez González
   - Total: $945000.0
   - Estado: PENDING
   - Productos:
     * U Knu Skool (Cantidad: 2, Talle: 35 ARG)
     * U Knu Skool (Cantidad: 2, Talle: 36 ARG)
     * U Knu Skool (Cantidad: 1, Talle: 37 ARG)
   - Total de productos: 5 unidades
Cargando orden cancelada...
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        ua1_0.address_id,
        ua1_0.user_id 
    from
        user_addresses ua1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.brand_id,
        p1_0.category_id,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at 
    from
        products p1_0
Hibernate: 
    select
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at 
    from
        brand b1_0 
    where
        b1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at 
    from
        size s1_0
Hibernate: 
    insert 
    into
        purchase_order
        (created_at, deleted_at, is_active, payment_method, status, total, updated_at, user_address_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        purchase_order_aud
        (revtype, payment_method, status, total, user_address_id, user_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Orden de compra #2 creada (CANCELLED):
   - Cliente: Juan Carlos Pérez González
   - Total: $945000.0
   - Estado: CANCELLED
   - Fecha: 2025-06-06
   - Productos:
     * U Knu Skool (Cantidad: 1, Talle: 38 ARG)
     * U Knu Skool (Cantidad: 3, Talle: 39 ARG)
     * U Knu Stack (Cantidad: 1, Talle: 40 ARG)
   - Total de productos: 5 unidades
Cargando orden pagada...
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        ua1_0.address_id,
        ua1_0.user_id 
    from
        user_addresses ua1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.email,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.name,
        u1_0.password,
        u1_0.role,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.country,
        a1_0.cpi,
        a1_0.created_at,
        a1_0.deleted_at,
        a1_0.is_active,
        a1_0.state,
        a1_0.street,
        a1_0.town,
        a1_0.updated_at 
    from
        addresses a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.brand_id,
        p1_0.category_id,
        p1_0.colour_id,
        p1_0.created_at,
        p1_0.deleted_at,
        p1_0.description,
        p1_0.image,
        p1_0.is_active,
        p1_0.name,
        p1_0.price,
        p1_0.status,
        p1_0.updated_at 
    from
        products p1_0
Hibernate: 
    select
        b1_0.id,
        b1_0.created_at,
        b1_0.deleted_at,
        b1_0.is_active,
        b1_0.name,
        b1_0.updated_at 
    from
        brand b1_0 
    where
        b1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        t1_0.id,
        t1_0.created_at,
        t1_0.deleted_at,
        t1_0.is_active,
        t1_0.name,
        t1_0.updated_at,
        c1_0.type_id,
        c1_0.updated_at 
    from
        category c1_0 
    left join
        type t1_0 
            on t1_0.id=c1_0.type_id 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.deleted_at,
        c1_0.is_active,
        c1_0.name,
        c1_0.updated_at,
        c1_0.value 
    from
        colour c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.created_at,
        s1_0.deleted_at,
        s1_0.is_active,
        s1_0.number,
        s1_0.system_type,
        s1_0.updated_at 
    from
        size s1_0
Hibernate: 
    insert 
    into
        purchase_order
        (created_at, deleted_at, is_active, payment_method, status, total, updated_at, user_address_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        purchase_order_aud
        (revtype, payment_method, status, total, user_address_id, user_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        detail
        (created_at, deleted_at, is_active, order_id, product_id, quantity, size_id, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        revision_info
        (revision_date, id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        detail_aud
        (revtype, order_id, product_id, quantity, size_id, rev, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Orden de compra #3 creada (PAID):
   - Cliente: Juan Carlos Pérez González
   - Total: $945000.0
   - Estado: PAID
   - Fecha: 2025-06-09
   - Productos:
     * Vans Zapatillas U Hylane (Cantidad: 1, Talle: 41 ARG)
     * Vans Zapatillas U Upland (Cantidad: 1, Talle: 42 ARG)
     * Vans Zapatillas U Upland (Cantidad: 2, Talle: 43 ARG)
     * Vans Zapatillas U Upland (Cantidad: 1, Talle: 44 ARG)
   - Total de productos: 5 unidades
Base de datos inicializada correctamente!
2025-06-11T05:32:57.066-03:00  INFO 439182 --- [apirest] [nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-11T05:32:57.067-03:00  INFO 439182 --- [apirest] [nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-11T05:32:57.069-03:00  INFO 439182 --- [apirest] [nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
=== ERROR DE MERCADOPAGO ===
Status Code: 400
Message: Api error. Check response for details
Response: com.mercadopago.net.MPResponse@381f4122
2025-06-11T05:34:21.624-03:00  INFO 439182 --- [apirest] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
Hibernate: 
    alter table addresses_aud 
       drop 
       foreign key FK10p0uldbbw4ngo8hfhor2bg6o
Hibernate: 
    alter table brand_aud 
       drop 
       foreign key FK5ip3g3x0aspvu378ak7ya3g8o
Hibernate: 
    alter table category 
       drop 
       foreign key FKo2thnhdqk8sj74hk40k64kap8
Hibernate: 
    alter table category_aud 
       drop 
       foreign key FKjpr6cpsy8m8s0y073w7d2ra8u
Hibernate: 
    alter table colour_aud 
       drop 
       foreign key FKkby6arg9sfdjl75nifdi8dp45
Hibernate: 
    alter table detail 
       drop 
       foreign key FKj3xts7y5rbrekgijwq4pb5aj6
Hibernate: 
    alter table detail 
       drop 
       foreign key FKin72vis4xiw2si2b3tmcd1727
Hibernate: 
    alter table detail 
       drop 
       foreign key FK7jsiia4228p3wgjl1oyy7tk8c
Hibernate: 
    alter table detail_aud 
       drop 
       foreign key FKqutth2mytb5s28num7xjkoiw8
Hibernate: 
    alter table discount_aud 
       drop 
       foreign key FKl89fsx52ekyakjmlff2x571w0
Hibernate: 
    alter table product_discount 
       drop 
       foreign key FK1mddxl69vl4ucs3mw8tpw1v38
Hibernate: 
    alter table product_discount 
       drop 
       foreign key FKof5epwi1xp9cmb7lh2bm36cnj
Hibernate: 
    alter table product_discount_aud 
       drop 
       foreign key FK4vl6hyf7o862as2gufrijkme1
Hibernate: 
    alter table product_image 
       drop 
       foreign key FK1n91c4vdhw8pa4frngs4qbbvs
Hibernate: 
    alter table product_image_aud 
       drop 
       foreign key FKapy7c15ok91775j15dunn8ych
Hibernate: 
    alter table product_size 
       drop 
       foreign key FKt3iuwe3pon0k0i2q5pd68n4ik
Hibernate: 
    alter table product_size 
       drop 
       foreign key FK6fxbikls9s0pbsqq68nr4m5fo
Hibernate: 
    alter table product_size_aud 
       drop 
       foreign key FKky4q9weirrtt26oysdne2ra4h
Hibernate: 
    alter table products 
       drop 
       foreign key FKl2cyj2st6mjygl2pgwd057ivu
Hibernate: 
    alter table products 
       drop 
       foreign key FK1cf90etcu98x1e6n9aks3tel3
Hibernate: 
    alter table products 
       drop 
       foreign key FKsl7v4glfqhenjmg9m841gj601
Hibernate: 
    alter table products_aud 
       drop 
       foreign key FKp9hlp9bjphkci62bgullu2fle
Hibernate: 
    alter table purchase_order 
       drop 
       foreign key FKjqu3o8f6m6l2ufease59kkehx
Hibernate: 
    alter table purchase_order 
       drop 
       foreign key FKe9vllsihkfo62ku9jene2ler8
Hibernate: 
    alter table purchase_order_aud 
       drop 
       foreign key FK8dgknj1iwmf0gamb8w5hodxyu
Hibernate: 
    alter table size_aud 
       drop 
       foreign key FKc0brlom5hanbetxfxgour3vvy
Hibernate: 
    alter table type_aud 
       drop 
       foreign key FK29gn743l8e8iunqt1w9ibap8j
Hibernate: 
    alter table user_addresses 
       drop 
       foreign key FKhqfg2eivfexu69i6cbw3w0tej
Hibernate: 
    alter table user_addresses 
       drop 
       foreign key FKn2fisxyyu3l9wlch3ve2nocgp
Hibernate: 
    alter table user_addresses_aud 
       drop 
       foreign key FK3mn7bmx2m7cdrj4jy38yp85a7
Hibernate: 
    alter table users_aud 
       drop 
       foreign key FKkf7vorod2dx6yfu6e1pyipcl4
Hibernate: 
    drop table if exists addresses
Hibernate: 
    drop table if exists addresses_aud
Hibernate: 
    drop table if exists brand
Hibernate: 
    drop table if exists brand_aud
Hibernate: 
    drop table if exists category
Hibernate: 
    drop table if exists category_aud
Hibernate: 
    drop table if exists colour
Hibernate: 
    drop table if exists colour_aud
Hibernate: 
    drop table if exists detail
Hibernate: 
    drop table if exists detail_aud
Hibernate: 
    drop table if exists discount
Hibernate: 
    drop table if exists discount_aud
Hibernate: 
    drop table if exists product_discount
Hibernate: 
    drop table if exists product_discount_aud
Hibernate: 
    drop table if exists product_image
Hibernate: 
    drop table if exists product_image_aud
Hibernate: 
    drop table if exists product_size
Hibernate: 
    drop table if exists product_size_aud
Hibernate: 
    drop table if exists products
Hibernate: 
    drop table if exists products_aud
Hibernate: 
    drop table if exists purchase_order
Hibernate: 
    drop table if exists purchase_order_aud
Hibernate: 
    drop table if exists revision_info
Hibernate: 
    drop table if exists revision_seq_gen
Hibernate: 
    drop table if exists size
Hibernate: 
    drop table if exists size_aud
Hibernate: 
    drop table if exists type
Hibernate: 
    drop table if exists type_aud
Hibernate: 
    drop table if exists user_addresses
Hibernate: 
    drop table if exists user_addresses_aud
Hibernate: 
    drop table if exists users
Hibernate: 
    drop table if exists users_aud
2025-06-11T05:34:24.159-03:00  INFO 439182 --- [apirest] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-06-11T05:34:24.163-03:00  INFO 439182 --- [apirest] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
